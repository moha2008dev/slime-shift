[gd_scene load_steps=10 format=2]

[ext_resource path="res://scripts/Player.gd" type="Script" id=1]
[ext_resource path="res://fonts/Audiowide-Regular.ttf" type="DynamicFontData" id=2]

[sub_resource type="Shader" id=7]
code = "
shader_type canvas_item;

uniform float progress : hint_range(0.0, 1.0);
uniform float noise_desnity = 60;
uniform float beam_size : hint_range(0.01, 0.15);
uniform vec4 color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment()
{
	vec4 tex = texture(TEXTURE, UV);
	
	float noise = noise(UV * noise_desnity) * UV.y;
	
	float d1 = step(progress, noise);
	float d2 = step(progress - beam_size, noise);
	
	vec3 beam = vec3(d2 - d1) * color.rgb;
	
	tex.rgb += beam;
	tex.a *= d2;
	
	COLOR = tex;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/progress = 0.0
shader_param/noise_desnity = 60.0
shader_param/beam_size = 0.15
shader_param/color = Color( 0, 1.02, 1.2, 1 )

[sub_resource type="QuadMesh" id=1]
size = Vector2( 20, 20 )

[sub_resource type="Animation" id=9]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=10]
resource_name = "anim"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="RectangleShape2D" id=2]

[sub_resource type="DynamicFont" id=6]
size = 12
outline_size = 2
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 2 )

[node name="Player" type="KinematicBody2D" groups=["Player"]]
script = ExtResource( 1 )

[node name="MeshInstance2D" type="MeshInstance2D" parent="."]
material = SubResource( 8 )
mesh = SubResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="MeshInstance2D"]
anims/RESET = SubResource( 9 )
anims/anim = SubResource( 10 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Label" type="Label" parent="."]
margin_left = -20.0
margin_top = -26.0
margin_right = 20.0
margin_bottom = -12.0
grow_horizontal = 2
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_fonts/font = SubResource( 6 )
align = 1
valign = 1

[node name="BufferTimer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.1
one_shot = true

[node name="LiquidTimer" type="Timer" parent="."]
wait_time = 10.0
one_shot = true

[connection signal="timeout" from="LiquidTimer" to="." method="_on_LiquidTimer_timeout"]
